include("blocksys.jl")
include("matrixgen.jl")

using .blocksys
using LinearAlgebra
size = 10000
function test()
    matrixgen.blockmat(size, 4, 10.0, "A.txt")
    A, n, l = blocksys.load_matrix("A.txt")
    b = blocksys.calculate_b(A, n, l)
    x, s, m = @timed blocksys.solveGauss(A, b, n, l)
    d = norm(x - ones(n))
    println("gauss")
    println("d = $d")
    println("s = $s")
    println("m = $m")
    A, n, l = blocksys.load_matrix("A.txt")
    b = blocksys.calculate_b(A, n, l)
    x, s, m = @timed blocksys.solveGaussPivoted(A, b, n, l)
    d = norm(x - ones(n))
    println("gauss pivoted")
    println("d = $d")
    println("s = $s")
    println("m = $m")
    A, n, l = blocksys.load_matrix("A.txt")
    b = blocksys.calculate_b(A, n, l)
    x, s, m = @timed blocksys.solveGaussLU(A, b, n, l)
    d = norm(x - ones(n))
    println("gauss LU")
    println("d = $d")
    println("s = $s")
    println("m = $m")
    A, n, l = blocksys.load_matrix("A.txt")
    b = blocksys.calculate_b(A, n, l)
    x, s, m = @timed blocksys.solveGaussPivotedLU(A, b, n, l)
    d = norm(x - ones(n))
    println("gauss pivoted LU")
    println("d = $d")
    println("s = $s")
    println("m = $m")
end

test()
